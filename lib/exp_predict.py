import os
import joblib
import pandas as pd
from lib.utils import path,time_delta
from lib.sqlite3_operate import cve_query,cve_query_where,cve_exists
from lib.json2sqlite3 import *
from fxy.nlp2vec import wordindex
from fxy.model import textcnn
from sklearn.model_selection import train_test_split
from keras.models import load_model

def exp_model(delta=0):
    """
    exp训练及预测模型
    :return exp_proba: list or []
    """
    exp_proba=exp_proba2=list()
    so,cve=cve_query(db='cve',table='nvd',key=['*'])
    cve_df=pd.DataFrame(cve,columns=cve_tags)
    cve_csv=cve_df[['CVE_Items_cve_CVE_data_meta_ID','CVE_Items_cve_description_description_data_value','CVE_Items_publishedDate','CVE_EXP_label']]
    cve_csv.to_csv('CVE_EXP_2020.csv',index=0)
    # 抑制模型衰减：每月重训练一次
    month_day=time_delta(delta=0,format='%Y-%m-%d')
    if int(month_day.split('-')[2])==1:
        print('[+] Retrain model')
        x=cve_df['CVE_Items_cve_description_description_data_value'].astype('str')
        y=cve_df['CVE_EXP_label'].astype('int')
        nlp=wordindex(char_level=False)
        fx,fy=nlp.fit_transform(x,y)
        joblib.dump(nlp,'data/model/nlp.h5')
        train_x, valid_x, train_y, valid_y = train_test_split( fx, fy, random_state=2019,test_size = 0.3) 
        model=textcnn(input_type='wordindex',max_len=nlp.max_length,input_dim=nlp.input_dim,output_dim=16,class_num=1)
        model.fit(train_x, train_y, validation_data=(valid_x,valid_y), epochs=1, batch_size=128)
        joblib.dump(model,'data/model/textcnn.h5')

    # 测试：预测当天新增CVE
    print('[+] Load predict model')
    nlp=joblib.load('data/model/nlp.h5')
    model=joblib.load('data/model/textcnn.h5')
    cve=[]
    for d in delta:
        modified_time=time_delta(delta=d,format="%Y-%m-%d")
        so,tmp=cve_query_where(db='cve',table='nvd',key=['*'],where='CVE_Items_publishedDate like "%{}%"'.format(modified_time))
        cve=cve+tmp
    if cve:
        cve_df=pd.DataFrame(cve,columns=cve_tags)
        x=cve_df['CVE_Items_cve_description_description_data_value'].astype('str')
        fx=nlp.transform(x)
        model.summary()
        pre=model.predict(fx)
        pre=pd.DataFrame(pre)
        exp_proba=pd.concat([cve_df[['CVE_Items_cve_CVE_data_meta_ID','CVE_Items_cve_description_description_data_value','CVE_Items_publishedDate']],pre],axis=1)
        exp_proba.columns = ['CVE_ID','Description','PubDate','EXP_Proba']
        exp_proba=exp_proba.sort_values(by='EXP_Proba',ascending=False)
        exp_proba=exp_proba.values.tolist()
    else:
        print('[INFO] No CVE Today')

    # 测试：预测本月新增CVE
    time=time_delta(format="%Y-%m")
    so,cve=cve_query_where(db='cve',table='nvd',key=['*'],where='CVE_Items_publishedDate like "%{}%"'.format(time))
    if cve:
        cve_df=pd.DataFrame(cve,columns=cve_tags)
        x=cve_df['CVE_Items_cve_description_description_data_value'].astype('str')
        fx=nlp.transform(x)
        pre=model.predict(fx)
        pre=pd.DataFrame(pre)
        exp_proba2=pd.concat([cve_df[['CVE_Items_cve_CVE_data_meta_ID','CVE_Items_cve_description_description_data_value','CVE_Items_publishedDate']],pre],axis=1)
        exp_proba2.columns = ['CVE_ID','Description','PubDate','EXP_Proba']
        exp_proba2=exp_proba2.sort_values(by='EXP_Proba',ascending=False)

        so,exist_cid=cve_exists(db='exp',table='exps',key=['cve_id'])
        exp_proba2['Ground_Truth']=exp_proba2.apply(lambda x:1 if x['CVE_ID'] in exist_cid else 'None',axis=1)
        exp_proba2=exp_proba2.values.tolist()
    else:
        print('[INFO] No CVE Month')
        
    return exp_proba,exp_proba2

if __name__ == '__main__':
    pass
