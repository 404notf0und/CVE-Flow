import matplotlib.pyplot as plt
import os
import tldextract
from collections import Counter,OrderedDict
from utils import path,time_delta,dict_sort
from operate_sqlite import SQLite
def query(table='nvd_cve',column='CVE_Items_impact_baseMetricV2_severity',time=2014,top=10):
    """
    取数
    """
    so = SQLite("data/nvd.db")
    sql = "select {column},count(CVE_Items_cve_CVE_data_meta_ID) as ct from {table} \
          where CVE_Items_publishedDate like '%{time}%' \
          group by {column} \
          order by ct DESC".format(column=column,table=table,time=time)
    r = so.query(sql)

    od = OrderedDict()
    for i in r:
        od[i[0]]=i[1]
    
    od_pec=dict()
    if len(od.keys())>top:
        i=0
        for k,v in od.items():
            if i<top:
                od_pec[k]=round(v/sum(od.values()),4)
            else:
                break
            i=i+1
        od_pec['other']=round(1-sum(od_pec.values()),4)
    else:
        for k,v in od.items():
            od_pec[k]=round(v/sum(od.values()),4)
    
    return od_pec

def draw_pie(table='nvd_cve',column='CVE_Items_impact_baseMetricV2_severity',time=2014,top=10):
    """
    画饼图，保存
    """
    od_pec=query(table=table,column=column,time=time,top=top)
    labels=od_pec.keys()
    values=od_pec.values()
    explode = [0.1 for _ in range(0, len(labels))]
    explode[-1] = 0

    plt.rcParams['font.sans-serif'] = ['SimHei']  # 解决中文乱码
    plt.rcParams['font.family'] = 'sans-serif'
    plt.rcParams['axes.unicode_minus'] = False  # 坐标轴负号的处理
    plt.pie(values,  # 指定绘图的数据
                explode=explode,  # 指定饼图某些部分的突出显示，即呈现爆炸式
                labels=labels,  # 为饼图添加标签说明，类似于图例说明
                labeldistance=1.2,  # 设置各扇形标签（图例）与圆心的距离；
                pctdistance=0.6,  # ：设置百分比标签与圆心的距离；
                startangle=90,  # 设置饼图的初始摆放角度；
                shadow=True,  # 是否添加饼图的阴影效果；
                autopct='%3.2f%%')
    plt.axis('equal')
    plt.title('漏洞占比')
    if not os.path.exists(path('data/img')):
        os.mkdir(path('data/img'))
    plt.savefig(path('data/img','{time}_{table}_{column}_{top}.png'.format(time=time,table=table,column=column,top=top)))
    plt.show()

def hml(table='nvd_cve',column='CVE_Items_impact_baseMetricV2_severity',time=2020):
    """
    主要计算高中低危CVE数量
    """
    so = SQLite("data/nvd.db")
    
    od={}
    sql = "select {column},count(CVE_Items_cve_CVE_data_meta_ID) as ct from {table} \
          where CVE_Items_publishedDate like '%{time}%' \
          group by {column} \
          order by ct DESC".format(column=column,table=table,time=time)
    r = so.query(sql)
    od = OrderedDict()
    for i in r:
        od[i[0]]=i[1]
    
    return od

def time_hml(table='nvd_cve',column='CVE_Items_impact_baseMetricV2_severity',time=2020):
    """
    历年来高中低危CVE数量折线图
    """
    od_high={}
    od_mid={}
    od_low={}
    od_all={}
    if len(time)==2:
        year=int(time_op(delta=0,format="%Y"))-1999+1
        for i in range(year):
            time=1999+i
            od=query_timeline(table='nvd_cve',column=column,time=time)
            od_high[str(time)]=od['HIGH']
            od_mid[str(time)]=od['MEDIUM']
            od_low[str(time)]=od['LOW']
            od_all[str(time)]=od['HIGH']+od['MEDIUM']+od['LOW']
    elif len(time)==4:
        if time<time_op(delta=0,format="%Y"):
            month=12
        else:
            month=time_op(delta=0,format="%Y%m")[4:]
        for i in range(1,int(month)+1):
            if i <10:
                i='0'+str(i)
            time1=time+'-'+i
            od=query_timeline(table='nvd_cve',column=column,time=time1)
            if 'HIGH' not in od.keys():
                od['HIGH']=0
            if 'MEDIUM' not in od.keys():
                od['MEDIUM']=0
            if 'LOW' not in od.keys():
                od['LOW']=0

            od_high[str(time1)]=od['HIGH']
            od_mid[str(time1)]=od['MEDIUM']
            od_low[str(time1)]=od['LOW']
    else:
        return
    print(od_all,od_high,od_mid,od_low)
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 解决中文乱码
    plt.rcParams['font.family'] = 'sans-serif'
    plt.rcParams['axes.unicode_minus'] = False  # 坐标轴负号的处理
    plt.plot(od_all.keys(),od_all.values(),label='ALL')
    plt.plot(od_high.keys(),od_high.values(),label='HIGH')
    plt.plot(od_mid.keys(),od_mid.values(),label='MEDIUM')
    plt.plot(od_low.keys(),od_low.values(),label='LOW')
    plt.xticks(rotation=45)
    plt.yticks(rotation=30)
    plt.legend()
    plt.xlabel('Year')
    plt.ylabel('Type')
    plt.title('漏洞趋势')
    if not os.path.exists(path('data/img')):
        os.mkdir(path('data/img'))
    plt.savefig(path('data/img','{time}_{table}_{column}.png'.format(time=time,table=table,column=column)))
    plt.show()

def draw():
    year_year=time_op(delta=0,format="%Y")
    year_month=time_op(delta=-100,format="%Y-%m")
    year_all=str(year_year)[0:2]
    for y in [year_year,year_month,year_all]:
        draw_pie(time=y)
        draw_timeline(time=y)

def dict_merge(r):
    cwe_list=([i for i in r])
    all_list={}
    for i in cwe_list:
        if ';' in i[0]:
            c_list=i[0].split(';')
            for c in c_list:
                if c not in all_list.keys():
                    all_list[c]=i[1]
                else:
                    all_list[c]=all_list[c]+i[1]
        else:
            if i[0] not in all_list.keys():
                all_list[i[0]]=i[1]
            else: 
                all_list[i[0]]=all_list[i[0]]+i[1]
    return all_list

def execute(sql):
    so = SQLite("data/nvd.db")
    #print(sql)
    r=so.execute(sql)
    return r

def year_count():
    """
    计算历年来CVE的总数
    """
    sql="select substr(CVE_Items_publishedDate,0,5),count(CVE_Items_cve_CVE_data_meta_ID) as ct from nvd_cve group by substr(CVE_Items_publishedDate,0,5) order by ct desc"
    r=execute(sql)
    year_count={}
    for i in r:
        year_count[i[0]]=i[1]
    
    return dict_sort(year_count)

def cwe_count():
    """
    计算历年来总数据的各CWE数量
    """
    sql="select CVE_Items_cve_problemtype_problemtype_data_description_value,count(CVE_Items_cve_CVE_data_meta_ID) as ct from nvd_cve group by CVE_Items_cve_problemtype_problemtype_data_description_value order by ct desc"
    r=execute(sql)
    all_list=dict_merge(r)
    print(all_list)
    return all_list

def year_cwe():
    """
    计算典型CWE id随时间的变化
    """
    year_cwe={}
    
    year=int(time_op(delta=0,format="%Y"))-1999+1
    for y in range(year):
        sql="select CVE_Items_cve_problemtype_problemtype_data_description_value,count(CVE_Items_cve_CVE_data_meta_ID) as ct from nvd_cve where CVE_Items_publishedDate like '%{}%' group by CVE_Items_cve_problemtype_problemtype_data_description_value order by ct desc".format(str(1999+y))
        r=execute(sql)
        all_list=dict_merge(r)
        year_cwe[str(1999+y)]=all_list
    
    sort_cwe={}
    for cwe in ['CWE-200','CWE-79','CWE-20','CWE-119','CWE-264','CWE-89','CWE-94']:
        tmp={}
        for k,v in year_cwe.items():
            if cwe in v.keys():
                tmp[k]=v[cwe]
    
        sort_cwe[cwe]=tmp

    return sort_cwe

def ref_source():
    """
    ref source
    """
    sql="select CVE_Items_cve_references_reference_data_refsource,count(CVE_Items_cve_CVE_data_meta_ID) as ct from nvd_cve group by CVE_Items_cve_references_reference_data_refsource order by ct desc"
    r=execute(sql)
    all_list=dict_merge(r)
    return dict_sort(all_list,key=False,value=True)

def ref_url():
    """
    ref url top N
    """
    sql="select CVE_Items_cve_references_reference_data_url from nvd_cve"
    r=execute(sql)
    url=[tldextract.extract(i[0]).domain for i in r]
    sort_url=Counter(url)
    
    return sort_url

def ref_tags():
    """
    ref tags:exploit
    """
    sql="select CVE_Items_cve_references_reference_data_url from nvd_cve where CVE_Items_cve_references_reference_data_tags like '%Exploit%'"
    r=execute(sql)
    tags=[i[0] for i in r]
    domains=[]
    for tag in tags:
        split_tag=tag.split(';')
        if len(split_tag)>1:
            for t in split_tag:
                domain=tldextract.extract(t).domain
                domains.append(domain)
        else:
            domain=tldextract.extract(tag).domain
            domains.append(domain)
    sort_tags=Counter(domains)

    return sort_tags

def cpe_count():
    """
    计算总cve数据的cpe top N
    """
    sql="select CVE_Items_configurations_nodes_children_cpe_match_cpe23Uri from nvd_cve"
    sql2="select CVE_Items_configurations_nodes_cpe_match_cpe23Uri from nvd_cve"
    r=execute(sql)
    r2=execute(sql2)
    cpe=[i[0].split(':')[3] for i in r if i[0]]
    #print(cpe)
    cpe2=[i[0] for i in r2 if i[0]]
    for j in cpe2:
        if ';' in j:
            js=j.split(';')
            for k in js:
                cpe.append(k.split(':')[3])
    cpe_count=Counter(cpe) # Counter是无序的
    
    return dict(cpe_count)

def get_top(od,top=25):
    od_pec=dict()
    od=dict_sort(od,key=False,value=True)
    if len(od.keys())>top:
        i=0
        for k,v in od.items():
            if i<top:
                #print(k,v)
                od_pec[k]=round(v/sum(od.values()),4)
            else:
                break
            i=i+1
        od_pec['other']=round(1-sum(od_pec.values()),4)
    else:
        for k,v in od.items():
            od_pec[k]=round(v/sum(od.values()),4)

    return od_pec

print(ref_tags())

def main():
    """
    可视化CVE数据
    """
    draw()

if __name__ == '__main__':
    pass
    #main()