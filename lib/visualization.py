import codecs
import math
import os
import shutil
import tldextract
import pandas as pd
import matplotlib.pyplot as plt
from collections import Counter,OrderedDict
from lib.utils import path,time_delta
from lib.sqlite3_operate import SQLite,cve_query_where
from lib.json2sqlite3 import *

def draw_pic(table='nvd',column='CVE_Items_cve_problemtype_problemtype_data_description_value',time='2020',top=5):
    """
    作图，例如CWE，可扩展至其他字段
    """
    if len(time)==2:
        start=0
        end=5
    elif len(time)==4:
        start=6
        end=8
    else:
        start=9
        end=11
    so = SQLite("data/cve.db")
    sql = "select cast(substr(CVE_Items_publishedDate,{start},{end}) as int)as ct,{column},count(CVE_Items_cve_CVE_data_meta_ID) from {table} \
          where CVE_Items_publishedDate like '%{time}%' \
          group by substr(CVE_Items_publishedDate,{start},{end}),{column} \
          order by ct DESC".format(column=column,table=table,time=time,start=start,end=end)
    r = so.query(sql)
    value_list = [i for i in r]
    
    # split
    r=[]
    for i in value_list:
        if i[1] not in ['',None]:
            if ';' in i[1]:
                cwe=i[1].split(';')
                for c in cwe:
                    temp=(i[0],c,i[2])
                    r.append(temp)
            else:
                r.append(i)
    # merge
    rr=dict()
    for i in r:
        if i[0] in rr.keys():
            if i[1] in rr[i[0]].keys():
                rr[i[0]][i[1]]+=i[2]
            else:
                rr[i[0]][i[1]]=i[2]
        else:
            rr[i[0]]={i[1]:i[2]}
    
    for k,v in rr.items():
        rr[k]=OrderedDict(sorted(v.items(),key=lambda item:item[1],reverse=True))
    
    # 计算所有时间的top CWE:根据名次排
    unique_cwe=list(set([ki for k,v in rr.items() for ki,kv in v.items()]))
    most_value=[]
    if len(unique_cwe)>top:
        for k,v in rr.items():
            t=0
            for i in rr[k]:
                if i not in ['NVD-CWE-Other','NVD-CWE-noinfo']:
                    most_value.append(i)
                    t+=1
                    if t==top:
                        break
    
    topN=Counter(most_value).most_common(top) 

    # 根据top CWE计算CWE count
    topN_year=dict()
    for j in topN:
        temp=dict()
        for k,v in rr.items():
            if j[0] in v:
                temp[k]=v[j[0]]
            else:
                temp[k]=0
        topN_year[j[0]]=temp
    
    for k,v in topN_year.items():
        plt.rcParams['font.sans-serif'] = ['SimHei']  # 解决中文乱码
        plt.rcParams['font.family'] = 'sans-serif'
        plt.rcParams['axes.unicode_minus'] = False  # 坐标轴负号的处理
        plt.plot(v.keys(),v.values(),label=k)
        plt.xticks(rotation=45)
        plt.yticks(rotation=30)
    plt.legend()
    plt.xlabel('Time')
    plt.ylabel('CVE Number')
    if column=='CVE_Items_cve_problemtype_problemtype_data_description_value':
        title='%s-CWE趋势图' %(time)
    plt.title(title)
    if not os.path.exists(path('../data/img')):
        os.mkdir(path('../data/img'))
    plt.savefig(path('../data/img','{title}.png'.format(title=title)))
    plt.close('all')
    #plt.show()

def markdown_table_content(rets):
    """
    将数据转换为markdown格式的表结构数据
    """
    markdown_rets = []
    if not rets:
        return

    header = rets[0]
    header_str = " | ".join(header)
    header_str = "| %s| " % header_str
    header_sep = ["---" for _ in rets[0]]
    header_sep_str = " | ".join(header_sep)
    header_sep_str = "| %s| " % header_sep_str

    markdown_rets.append(header_str)
    markdown_rets.append(header_sep_str)

    for ret in rets[1:]:
        column_str = " | ".join([str(_) for _ in ret])
        column_str = "| %s| " % column_str
        markdown_rets.append(column_str)

    return markdown_rets

def markdown_table(header,content):
    if content:
        table=[]
        table.append(header)
        for c in content:
            table.append(list(c))
        md_table=markdown_table_content(table)
    else:
        md_table=None
    return md_table

def draw_md(time,fpath,day_exp_add,day_exp_proba,month_exp_add,month_exp_proba):
    """
    生成单份markdown报告
    """
    # pic：所有CVE数据趋势图
    draw_pic(time=time)

    # table1：当天EXP新增
    md_table1=markdown_table(header=['ID','Description','CVE_PubDate','EXP_PubDate','Source'],content=day_exp_add)

    # table2：当天EXP预测
    md_table2=markdown_table(header=['ID','Description','CVE_PubDate','Exp_Proba'],content=day_exp_proba)

    # table3：当月EXP新增
    md_table3=markdown_table(header=['ID','Description','CVE_PubDate','EXP_PubDate','Source'],content=month_exp_add)

    # table4：当月CVE数据
    md_table4=markdown_table(header=['ID','Description','CVE_PubDate','Exp_Proba','Ground_Truth'],content=month_exp_proba)

    # report
    with codecs.open(fpath,mode='w',encoding='utf-8') as fr:
        fr.write('# CVE-Flow')
        fr.write(os.linesep)
        fr.write('1999-2020存量CVE数据分析、监控CVE增量更新、基于深度学习的CVE EXP预测和自动化推送')
        fr.write(os.linesep)
        fr.write('# Report')
        fr.write(os.linesep)
        fr.write('- [CVE-Flow:1999-2020年CVE数据分析](https://mp.weixin.qq.com/s/NWrRBry-TAjsQk1NJH_M9w)')
        fr.write(os.linesep)
        fr.write('- [CVE-Flow:CVE EXP监控和预测](https://mp.weixin.qq.com/s/8X2Jau5QJ8-TWolpGYBslg)')
        fr.write(os.linesep)
        fr.write('# [数据-所有](report_20.md)')
        fr.write(os.linesep)
        fr.write('# [数据-年度](report_{}.md)'.format(time[0:4]))
        fr.write(os.linesep)
        if len(time) in [2,4]:
            fr.write('# %s CWE趋势图' % time)
            fr.write(os.linesep)
            fr.write('![{time}-CWE趋势](data/img/{time}-CWE趋势图.png)'.format(time=time))
            fr.write(os.linesep)
        else:
            fr.write('# 本日新增EXP')
            fr.write(os.linesep)
            if md_table1:
                st = os.linesep.join(md_table1)
            else:
                st='无'
            fr.write(st)
            fr.write(os.linesep)
            fr.write('# 本日新增CVE及EXP预测')
            fr.write(os.linesep)
            if md_table2:
                st = os.linesep.join(md_table2)
            else:
                st='无'
            fr.write(st)
            fr.write(os.linesep)
            fr.write('# {time} 当月新增EXP'.format(time=time))
            fr.write(os.linesep)
            if md_table3:
                st = os.linesep.join(md_table3)
            else:
                st='无'
            fr.write(st)
            fr.write(os.linesep)
            fr.write('# {time} 当月新增CVE及EXP预测'.format(time=time))
            fr.write(os.linesep)
            if md_table4:
                st = os.linesep.join(md_table4)
            else:
                st='无'
            fr.write(st)
            fr.write(os.linesep)

def draw_report(day_exp_add=None,day_exp_proba=None,month_exp_add=None,month_exp_proba=None):
    """
    生成report：总-年-月三份报告
    """
    print('[+] Start generate report.md')
    year_month = time_delta(delta=0, format="%Y-%m")
    year_year=time_delta(delta=0,format="%Y")
    year_all=str(year_year[0:2])
    for y in [year_month,year_year,year_all]:
        fpath='report_{}.md'.format(y)
        draw_md(time=y,fpath=fpath,day_exp_add=day_exp_add,day_exp_proba=day_exp_proba,month_exp_add=month_exp_add,month_exp_proba=month_exp_proba)
        if len(str(y)) == 7:
            fpath_month = fpath
            fpath_default = "README.md"
            shutil.copyfile(fpath_month, fpath_default)
    print('[+] Done!')

def draw_introduction(day_exp_add=None,day_exp_proba=None):
    # table1：当天EXP新增
    if day_exp_add:
        md_table1=markdown_table(header=['ID','Description','CVE_PubDate','EXP_PubDate','Source'],content=day_exp_add)
    else:
        md_table1=None
    if not md_table1:
        md_table1='无'
    # table2：当天EXP预测
    if day_exp_proba:
        md_table2=markdown_table(header=['ID','Description','CVE_PubDate','Exp_Proba'],content=day_exp_proba)
    else:
        md_table2=None
    if not md_table2:
        md_table2='无'
    return md_table1,md_table2

if __name__ == '__main__':
    pass
    