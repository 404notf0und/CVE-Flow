# -*- coding: utf-8 -*-
import sqlite3
import os
import logging
import codecs

class SQLite(object):
	"""
	sqlite3增删改查
	"""
	def __init__(self,path,is_new=False,script_file=""):
		"""
		init
		:param path:
		:param is_new:
		:param scirpt_file:
		"""
		if is_new:
			if os.path.exists(path):
				os.remove(path)
			if script_file:
				with codecs.open(script_file,mode='rb',encoding='utf-8') as f:
					script=f.read()
					self.sqlite3_conn=sqlite3.connect(path,timeout=20)
					self.executescript(script)
		self.sqlite3_conn=sqlite3.connect(path,timeout=20)
		
	def executescript(self,script):
		"""
		执行sql脚本文件
		"""
		self.sqlite3_conn.executescript(script)

	def execute(self,sql,values=None):
		"""
		执行单条sql，支持预编译参数，参数类型为tuple
		"""
		logging.debug(sql)
		cursor=self.sqlite3_conn.cursor()
		try:
			if values:
				r=cursor.execute(sql,values)
			else:
				r=cursor.execute(sql)
		except Exception as e:
			logging.error("failed execute %s,error:%s" %(sql,repr(e)))

		self.sqlite3_conn.commit()

	def insert(self,sql,values=None):
		"""
		预编译插入
		"""
		logging.debug(sql)
		cursor=self.sqlite3_conn.cursor()
		try:
			r=cursor.execute(sql,(values))
		except Exception as e:
			logging.error("failed execute %s,error:%s" %(sql,repr(e)))

		self.sqlite3_conn.commit()
	
	def executemany(self,sql,params=None):
		"""
		执行多条sql，支持预编译参数，参数类型为tuple

		"""
		logging.debug(sql)
		cursor=self.sqlite3_conn.cursor()
		cursor.executemany(sql,params)
		self.sqlite3_conn.commit()

	def query(self,sql):
		"""
		查数据
		"""
		logging.debug(sql)
		cursor=self.sqlite3_conn.cursor()
		try:
			cursor.execute(sql)
		except Exception as e:
			logging.error("failed execute %s,error:%s" %(sql,repr(e)))
		for line in cursor.fetchall():
			yield line

	def close(self):
		"""
		关闭数据库连接
		"""
		self.sqlite3_conn.close()

def create_table(db='cvedetail',table='cvedetail_exp',key=['cve_id','label'],primary_key='cve_id'):
    """
    创建表
    """
    try:
        so=SQLite('../data/{db}.db'.format(db=db))
        kv=" TEXT,".join(key)
        sql="create table if not exists {table}({kv} TEXT,CONSTRAINT constraint_name PRIMARY KEY({pk}))".format(table=table,kv=kv,pk=primary_key)
        so.execute(sql)
    except Exception as e:
        print("[!] Error %s in function `create_table`" %str(e))

if __name__=="__main__":
	## test execute script
	# sql=SQLite("sqlite.db",is_new=True,script_file='script.txt')
	# cursor=sql.query("SELECT id, name, address, salary  from COMPANY")
	# for i in cursor:
	# 	print(i)
	# sql.close()

	# test replace and primary key
	sql=SQLite("data/nvd2.db")
	sql.execute('CREATE TABLE IF NOT EXISTS positions ( id TEXT, title text NOT NULL, min_salary numeric,CONSTRAINT constraint_name PRIMARY KEY(id));')
	sql.execute('replace INTO positions (id,title, min_salary) VALUES ("CVE-2020-12267","DBA", 120001), ("CVE-2020-12261","Developer", 100000);')
	r=sql.query("select * from positions")
	print([i for i in r])
