# -*- coding: utf-8 -*-
import sqlite3
import os
import logging
import codecs

# 一条CVE具备完整的65个字段
cve_tags=['CVE_Items_cve_data_type' ,'CVE_Items_cve_data_format' ,'CVE_Items_cve_data_version','CVE_Items_cve_CVE_data_meta_ID' ,'CVE_Items_cve_CVE_data_meta_ASSIGNER' ,\
        'CVE_Items_cve_problemtype_problemtype_data_description_lang' ,'CVE_Items_cve_problemtype_problemtype_data_description_value' ,'CVE_Items_cve_problemtype_problemtype_data_description' ,'CVE_Items_cve_references_reference_data' ,'CVE_Items_cve_references_reference_data_url' ,\
        'CVE_Items_cve_references_reference_data_name' ,'CVE_Items_cve_references_reference_data_refsource' ,'CVE_Items_cve_references_reference_data_tags' ,'CVE_Items_cve_description_description_data_lang' ,'CVE_Items_cve_description_description_data_value' ,\
        'CVE_Items_configurations_nodes' ,'CVE_Items_configurations_CVE_data_version' ,'CVE_Items_configurations_nodes_operator' ,'CVE_Items_configurations_nodes_children_operator' ,'CVE_Items_configurations_nodes_children_cpe_match_vulnerable',\
        'CVE_Items_configurations_nodes_children_cpe_match_cpe23Uri' ,'CVE_Items_configurations_nodes_children_cpe_match_versionStartIncluding' ,'CVE_Items_configurations_nodes_children_cpe_match_versionEndExcluding' ,'CVE_Items_configurations_nodes_children_cpe_match_versionEndIncluding' ,'CVE_Items_configurations_nodes_children_cpe_match_versionStartExcluding' ,\
        'CVE_Items_configurations_nodes_cpe_match_vulnerable' ,'CVE_Items_configurations_nodes_cpe_match_cpe23Uri' ,'CVE_Items_configurations_nodes_cpe_match_versionStartIncluding' ,'CVE_Items_configurations_nodes_cpe_match_versionEndExcluding' ,'CVE_Items_configurations_nodes_cpe_match_versionEndIncluding' ,\
        'CVE_Items_configurations_nodes_cpe_match_versionStartExcluding' ,'CVE_Items_impact_baseMetricV3_cvssV3_version' ,'CVE_Items_impact_baseMetricV3_cvssV3_vectorString' ,'CVE_Items_impact_baseMetricV3_cvssV3_attackVector' ,'CVE_Items_impact_baseMetricV3_cvssV3_attackComplexity' ,\
        'CVE_Items_impact_baseMetricV3_cvssV3_privilegesRequired' ,'CVE_Items_impact_baseMetricV3_cvssV3_userInteraction' ,'CVE_Items_impact_baseMetricV3_cvssV3_scope' ,'CVE_Items_impact_baseMetricV3_cvssV3_confidentialityImpact' ,'CVE_Items_impact_baseMetricV3_cvssV3_integrityImpact' ,\
        'CVE_Items_impact_baseMetricV3_cvssV3_availabilityImpact' ,'CVE_Items_impact_baseMetricV3_cvssV3_baseScore' ,'CVE_Items_impact_baseMetricV3_cvssV3_baseSeverity' ,'CVE_Items_impact_baseMetricV3_exploitabilityScore' ,'CVE_Items_impact_baseMetricV3_impactScore' ,\
        'CVE_Items_impact_baseMetricV2_cvssV2_version' ,'CVE_Items_impact_baseMetricV2_cvssV2_vectorString' ,'CVE_Items_impact_baseMetricV2_cvssV2_accessVector' ,'CVE_Items_impact_baseMetricV2_cvssV2_accessComplexity' ,'CVE_Items_impact_baseMetricV2_cvssV2_authentication' ,\
        'CVE_Items_impact_baseMetricV2_cvssV2_confidentialityImpact' ,'CVE_Items_impact_baseMetricV2_cvssV2_integrityImpact' ,'CVE_Items_impact_baseMetricV2_cvssV2_availabilityImpact' ,'CVE_Items_impact_baseMetricV2_cvssV2_baseScore' ,'CVE_Items_impact_baseMetricV2_severity' ,\
        'CVE_Items_impact_baseMetricV2_exploitabilityScore' ,'CVE_Items_impact_baseMetricV2_impactScore' ,'CVE_Items_impact_baseMetricV2_acInsufInfo' ,'CVE_Items_impact_baseMetricV2_obtainAllPrivilege' ,'CVE_Items_impact_baseMetricV2_obtainUserPrivilege' ,\
        'CVE_Items_impact_baseMetricV2_obtainOtherPrivilege' ,'CVE_Items_impact_baseMetricV2_userInteractionRequired' ,'CVE_Items_publishedDate','CVE_Items_lastModifiedDate' ,'CVE_Items_impact']

class SQLite(object):
    """
    sqlite3增删改查
    """
    def __init__(self,path,is_new=False,script_file=""):
        """
        init
        :param path:
        :param is_new:
        :param scirpt_file:
        """
        if is_new:
            if os.path.exists(path):
                os.remove(path)
            if script_file:
                with codecs.open(script_file,mode='rb',encoding='utf-8') as f:
                    script=f.read()
                    self.sqlite3_conn=sqlite3.connect(path,timeout=20)
                    self.executescript(script)
        self.sqlite3_conn=sqlite3.connect(path,timeout=20)
        
    def executescript(self,script):
        """
        执行sql脚本文件
        """
        self.sqlite3_conn.executescript(script)

    def execute(self,sql,values=None):
        """
        执行单条sql，支持预编译参数，参数类型为tuple
        """
        logging.debug(sql)
        cursor=self.sqlite3_conn.cursor()
        try:
            if values:
                r=cursor.execute(sql,values)
            else:
                r=cursor.execute(sql)
        except Exception as e:
            logging.error("failed execute %s,error:%s" %(sql,repr(e)))

        self.sqlite3_conn.commit()

    def insert(self,sql,values=None):
        """
        预编译插入
        """
        logging.debug(sql)
        cursor=self.sqlite3_conn.cursor()
        try:
            r=cursor.execute(sql,(values))
        except Exception as e:
            logging.error("failed execute %s,error:%s" %(sql,repr(e)))

        self.sqlite3_conn.commit()
    
    def executemany(self,sql,params=None):
        """
        执行多条sql，支持预编译参数，参数类型为tuple

        """
        logging.debug(sql)
        cursor=self.sqlite3_conn.cursor()
        cursor.executemany(sql,params)
        self.sqlite3_conn.commit()

    def query(self,sql):
        """
        查数据
        """
        logging.debug(sql)
        cursor=self.sqlite3_conn.cursor()
        try:
            cursor.execute(sql)
        except Exception as e:
            logging.error("failed execute %s,error:%s" %(sql,repr(e)))
        for line in cursor.fetchall():
            yield line

    def close(self):
        """
        关闭数据库连接
        """
        self.sqlite3_conn.close()

def create_table(db='cvedetail',table='cvedetail_exp',key=['cve_id','label'],primary_key='cve_id'):
    """
    创建表
    """
    try:
        so=SQLite('data/{db}.db'.format(db=db))
        kv=" TEXT,".join(key)
        sql="create table if not exists {table}({kv} TEXT,CONSTRAINT constraint_name PRIMARY KEY({pk}))".format(table=table,kv=kv,pk=primary_key)
        so.execute(sql)
    except Exception as e:
        print("[!] Error %s in function `create_table`" %str(e))

def dict2createdb(table='nvd_cve',action='create'):
    """
    生成创建数据库语句
    """
    tags=" TEXT,".join(cve_tags)
    sql="create table if not exists {}({} TEXT,CONSTRAINT constraint_name PRIMARY KEY(CVE_Items_cve_CVE_data_meta_ID))".format(table,tags)

    return sql

def cve_exists(db='nvd',table='nvd_cve',key=['CVE_Items_cve_CVE_data_meta_ID']):
    """
    取本地数据库已有的CVE id等单字段
    :return exist_cid:
        :type:tuple_list or list, e.g. [('CVE-1999-0001', '1999-12-30T05:00Z')] or ['CVE-1999-0001']
    """
    so=SQLite('data/{db}.db'.format(db=db))
    sql='select {key} from {table}'.format(table=table,key=",".join(key))
    exist_cid=so.query(sql)
    if len(key)>1:
        if exist_cid:
            exist_cid=[i for i in exist_cid]
        else:
            exist_cid=[]
    else:
        if exist_cid:
            exist_cid=[i[0] for i in exist_cid]
        else:
            exist_cid=[]
    
    return so,exist_cid

def cve_exists_where(db='nvd',table='nvd_cve',key=['CVE_Items_cve_CVE_data_meta_ID'],where=''):
    """
    where关键字取本地数据库已有的CVE id等单字段
    :return exist_cid:
        :type:list
        :value:['1','2','3']
    """
    so=SQLite('data/{db}.db'.format(db=db))
    sql='select {key} from {table} where {wh}'.format(table=table,key=",".join(key),wh=where)
    exist_cid=so.query(sql)
    if len(key)>1:
        if exist_cid:
            exist_cid=[i for i in exist_cid]
        else:
            exist_cid=[]
    else:
        if exist_cid:
            exist_cid=[i[0] for i in exist_cid]
        else:
            exist_cid=[]
  
    return so,exist_cid

def sqlite_insert(sql,all_content,dir_name='../data/nvd.db'):
    so=SQLite(dir_name)
    ct=dict2createdb()
    so.execute(ct)
    # 批量插入sqlite3
    try:
        so.executemany(sql,all_content.values())
        print('[+] INSERT number:%d' %len(all_content))
        return True
    except Exception as e:
        logging.error("[sql]: %s %s" % (sql, str(e)))
    return 

if __name__=="__main__":
    ## test execute script
    # sql=SQLite("sqlite.db",is_new=True,script_file='script.txt')
    # cursor=sql.query("SELECT id, name, address, salary  from COMPANY")
    # for i in cursor:
    #   print(i)
    # sql.close()

    # test replace and primary key
    sql=SQLite("../data/nvd2.db")
    sql.execute('CREATE TABLE IF NOT EXISTS positions ( id TEXT, title text NOT NULL, min_salary numeric,CONSTRAINT constraint_name PRIMARY KEY(id));')
    sql.execute('replace INTO positions (id,title, min_salary) VALUES ("CVE-2020-12267","DBA", 120001), ("CVE-2020-12261","Developer", 100000);')
    r=sql.query("select * from positions")
    print([i for i in r])
