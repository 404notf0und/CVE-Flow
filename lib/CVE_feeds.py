import requests
from bs4 import BeautifulSoup
import codecs
import os
import glob
import shutil
import zipfile
import re
import logging
import configparser
from json2sqlite3 import json2sql
from utils import time_delta,path

def filename(updated):
    """
    将文件名的更新时间格式化为

    Args:
        updated:'6/15/2020 6:03:20 AM -04:00'

    Returns:
        updated:'20200615'
    """
    time=updated.split(' ')[0]
    rr=re.search(r'(\d+)\/(\d+)\/(\d+)',time)
    y=rr.group(3)
    m=rr.group(1)
    if int(m)<10:   
        m='0'+m
    t=rr.group(2)
    if int(t)<10:   
        t='0'+t
    updated=y+m+t
    return updated

def CVE_modified(html):
    """
    获取CVE-Modified最近更新时间的文件名和下载链接
    """
    soup=BeautifulSoup(html,'html.parser')
    i=0
    for desc in soup.find_all('tr',class_='xml-feed-desc-row'):
        gen_desc=desc.stripped_strings
        l_desc=list(gen_desc)
        if len(l_desc)==3:
            if i==1:
                break

            feed=l_desc[0]
            name=feed.split('-')[1].lower()
            updated=l_desc[1]
            updated=filename(updated)
            lname='nvdcve-1.1-{name}-{time}.json.zip'.format(name=name,time=updated)
            link='https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-{name}.json.zip'.format(name=name)
            i=i+1
    return lname,link

def json_download(fname,url,retry=3,ret=False):
    """
    下载cve json格式的zip
    """
    while retry>0:
        try:
            print("[DOWNLOAD]:%s to %s %s" %(fname,url,retry))
            r=requests.get(url,stream=True) # stream=True
            with open(path('../data/json',fname),'wb') as f:
                shutil.copyfileobj(r.raw,f) 
            retry=retry-1
            with zipfile.ZipFile(path('../data/json',fname)) as zf:
                print("[UNZIP]:%s" %fname)
                retry=0
                zf.extractall(path=path('../data/json'))
                ret=True
        except Exception as e:
            ret=False
            print("[DOWNLOAD ERROR]:%s error:%s" %(url,repr(e)))

    return ret


def CVE_monitor():
    """
    存量离线解析，增量在线更新
    """
    json_list=[]
    # 取配置文件中控制存量解析的参数,得到待解析入库文件列表
    conf=configparser.ConfigParser()
    conf.read('../conf/info.conf')
    stock=conf.get('CVE_Feeds','stock_control')
    if stock=='True':
        zips=glob.glob('../data/json/nvdcve-1.1-*.json.zip')
        for z in zips:
            with zipfile.ZipFile(z) as zf:
                print("[UNZIP]:%s" %z)
                zf.extractall(path=path('../data/json'))

        jsons_stock=glob.glob('../data/json/nvdcve-1.1-*.json')
        jsons_stock=[i for i in jsons_stock if 'modified' or 'recent' not in i]
        json_list.extend(jsons_stock)

        conf.set('CVE_Feeds','stock_control',str(False))
        with open('../conf/info.conf', 'w') as configfile:
            conf.write(configfile)
    else:
        print('[!] WARNING:stock is False，dont parse stock data！')

    # 下载最新的modified数据
    cve_data_feeds=path('../data/nvd',time_delta()+'nvd_data_feeds.html')
    if not os.path.exists(cve_data_feeds):
        r=requests.get(url)
        with codecs.open(cve_data_feeds,'wb') as f:
            f.write(r.content)

    if os.path.exists(cve_data_feeds):
        with codecs.open(cve_data_feeds,'rb') as f:
            modified_zip,modified_link=CVE_modified(f)
    
        json_download(modified_zip,modified_link)
        json_list.extend([path('../data/json','nvdcve-1.1-modified.json')])

    # 统一解析存量和增量CVE数据 
    for j in json_list:
        print(j)
        ret=json2sql(j,dir_name='../data/nvd.db')

    return ret

if __name__=="__main__":
    print(CVE_monitor())
    pass
    